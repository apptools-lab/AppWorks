#!/usr/bin/env node

'use strict';

const argv = require('argv-parse');
const fs = require('fs');
const path = require('path');
const { spawnSync } = require('child_process');
const options = require('./options.json');
const pkg = require('../package.json');
const { Doctor } = require('../lib/index');

const args = argv(options);

const transformerDirectory = path.join(__dirname, '../lib/', 'transforms');

// Show version
if (args.version) {
  console.log(pkg.version);
  process.exit();
}

// Show help text
if (args.help) {
  console.log('\nUsage : iceworks-doctor [options]');
  Object.keys(options).forEach((key) => {
    const option = options[key];
    console.log(
      option.alias ? `  -${option.alias},` : '',
      `  --${key}`,
      option.type !== 'boolean' ? ` : ${option.type}` : '',
      option.required ? ' *required*' : '',
    );
    console.log(`      ${option.desc}`);
  });
  process.exit();
}

// Check project
if (args.scan) {
  const doctor = new Doctor(args);
  doctor.scan(args.scan, {
    framework: args.framework,
    languageType: args.languageType || 'js',
  }).then((result) => {
    const report = {
      files: {
        count: result.filesInfo.count,
        lines: result.filesInfo.lines,
      },
      score: result.score || 0,
    };
    ['ESLint', 'maintainability', 'repeatability'].forEach(key => {
      if (result[key]) {
        report[key] = result[key].score;
      }
    });
    console.log(report);
    console.log(`Scan time: ${result.scanTime} s.`);
  }).catch((err) => {
    console.log('Error!');
    console.error(err);
  });
}

// codemod
if (args.codemod) {
  args.supportExts = (args.supportExts || []).concat(['json']);
  const [transformer, targetPath = process.cwd()] = args.codemod;

  const doctor = new Doctor(args);
  doctor.ignore = doctor.ignore.filter(i => i !== 'demo');
  const files = doctor.getFiles(targetPath).map(file => file.path);

  let transformerArgs = ['-p'];
  const transformerPath = path.join(transformerDirectory, `${transformer}.js`);

  if (!files.length) {
    console.log(`No files found matching ${targetPath}`);
  } else if (!fs.existsSync(transformerPath)) {
    console.log(`No transformer found matching ${transformer}`);
  } else {
    transformerArgs = transformerArgs.concat(['--transform', transformerPath]);
    transformerArgs = transformerArgs.concat(files);

    // jscodeshift has too large size as node dependencies and better use in CLI env.
    // Suggest user to install jscodeshift in codemod case.
    spawnSync('jscodeshift', transformerArgs,
      {
        stdio: 'inherit',
        stripEof: false,
      });
  }
}
