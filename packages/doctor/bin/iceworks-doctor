#!/usr/bin/env node

'use strict';

const argv = require('argv-parse');
const options = require('./options.json');
const pkg = require('../package.json');
const { Doctor } = require('../lib/index');

const args = argv(options);

// Show version
if (args.version) {
  console.log(pkg.version);
  process.exit();
}

// Show help text
if (args.help) {
  console.log('\nUsage : iceworks-doctor [options]');
  Object.keys(options).forEach((key) => {
    const option = options[key];
    console.log(
      option.alias ? `  -${option.alias},` : '',
      `  --${key}`,
      option.type !== 'boolean' ? ` : ${ option.type}` : '',
      option.required ? ' *required*' : '',
    );
    console.log(`      ${option.desc}`);
  });
  process.exit();
}

// Check project
if (args.scan) {
  const opt = {};
  if (Array.isArray(args.ignore)) {
    opt.ignore = args.ignore;
  }

  if (Array.isArray(args.supportExts)) {
    opt.supportExts = args.supportExts;
  }

  const doctor = new Doctor(opt);
  doctor.scan(args.scan).then((result) => {
    console.log({
      files: {
        count: result.filesInfo.count,
        lines: result.filesInfo.lines,
      },
      score: result.score,
      aliEslint: result.aliEslint.score,
      bestPractices: result.bestPractices.score,
      securityPractices: result.securityPractices.score,
      maintainability: result.maintainability.score,
      repeatability: result.repeatability.score,
    });
  }).catch((err) => {
    console.log('Error!');
    console.error(err);
  });
}
